name: Haskell CI

defaults:
  run:
    shell: bash

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.6.5"]
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Install pkgconfiglite
      if: matrix.os == 'windows-latest'
      run: choco install pkgconfiglite

    - name: Peek
      if: matrix.os == 'windows-latest'
      run: pkg-config --variable pc_path pkg-config

    - name: Install libsodium
      if: matrix.os == 'windows-latest'
      run: |
        curl -Ls https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz
        tar zxvf libsodium-1.0.18-mingw.tar.gz
        pkg_config_dir="$(pkg-config --variable pc_path pkg-config | cut -d ';' -f 1)"
        export PKG_CONFIG_PATH="$(readlink -f libsodium-win64/lib/pkgconfig)"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        ls -al "$PKG_CONFIG_PATH"
        # cp "libsodium-win64/lib/pkgconfig/libsodium.pc" "$pkg_config_dir"
        echo "==="
        sed -i "s|/d/a/1/s/|$(pwd)/|g" libsodium-win64/lib/pkgconfig/libsodium.pc
        cat libsodium-win64/lib/pkgconfig/libsodium.pc
        echo "==="
        echo "::set-env name=PKG_CONFIG_PATH::$PKG_CONFIG_PATH"
        echo "==="
        pkg-config --libs libsodium
        echo "==="
        pwd

    - name: Debugging
      env:
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
      run: |
        echo "BINARY_CACHE_REGION: $BINARY_CACHE_REGION"
        echo "BINARY_CACHE_THREADS: $BINARY_CACHE_THREADS"
        echo "BINARY_CACHE_URI: $BINARY_CACHE_URI"

    - uses: actions/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: '3.2.0.0'

    - name: Install build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

        cat >> cabal.project <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

    - name: Cabal update
      run: cabal update

    - name: Select build directory
      run: echo "::set-env name=CABAL_BUILDDIR::dist"

    - name: Peak
      run: ls -al

    - name: Cabal Configure
      run: cabal configure --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always

    - name: Restore cabal cache
      uses: haskell-works/cabal-cache-action@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
      with:
        args: |
          sync-from-archive \
            --threads       "$BINARY_CACHE_THREADS" \
            --archive-uri   "$BINARY_CACHE_URI" \
            --region        "$BINARY_CACHE_REGION" \
            --build-path    "$CABAL_BUILDDIR" \
            --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

    - name: Install dependencies
      run: cabal build all --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always --only-dependencies

    - name: Build
      run: |
        cabal build all --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always || \
        echo "=============================================================================================================" || \
        cabal build all --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always

    - name: Save cabal cache
      uses: haskell-works/cabal-cache-action@v1
      if: ${{ always() }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
      with:
        args: |
          sync-to-archive \
            --threads       "$BINARY_CACHE_THREADS" \
            --archive-uri   "$BINARY_CACHE_URI" \
            --region        "$BINARY_CACHE_REGION" \
            --build-path    "$CABAL_BUILDDIR" \
            --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

    - name: Git clone
      run: git clone https://github.com/input-output-hk/cardano-mainnet-mirror

    - name: Run tests
      run: cabal test cardano-cli cardano-node cardano-node-chairman --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always --test-show-details=direct --test-options='+RTS -g1'

    - name: Save cabal cache
      uses: haskell-works/cabal-cache-action@v1
      if: ${{ always() }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
        CARDANO_MAINNET_MIRROR: cardano-mainnet-mirror/epoch
      with:
        args: |
          sync-to-archive \
            --threads       "$BINARY_CACHE_THREADS" \
            --archive-uri   "$BINARY_CACHE_URI" \
            --region        "$BINARY_CACHE_REGION" \
            --build-path    "$CABAL_BUILDDIR" \
            --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"
